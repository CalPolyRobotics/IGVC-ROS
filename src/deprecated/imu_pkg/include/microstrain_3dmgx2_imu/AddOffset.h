/* Auto-generated by genmsg_cpp for file /home/rosbuild/hudson/workspace/doc-electric-imu_drivers/doc_stacks/2013-03-01_15-45-00.573229/imu_drivers/microstrain_3dmgx2_imu/srv/AddOffset.srv */
#ifndef MICROSTRAIN_3DMGX2_IMU_SERVICE_ADDOFFSET_H
#define MICROSTRAIN_3DMGX2_IMU_SERVICE_ADDOFFSET_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"
 #include "ros/macros.h"
 
 #include "ros/assert.h"
 
 #include "ros/service_traits.h"
 
 
 
 
 namespace microstrain_3dmgx2_imu
 {
 template <class ContainerAllocator>
 struct AddOffsetRequest_ {
   typedef AddOffsetRequest_<ContainerAllocator> Type;
 
   AddOffsetRequest_()
   : add_offset(0.0)
   {
   }
 
   AddOffsetRequest_(const ContainerAllocator& _alloc)
   : add_offset(0.0)
   {
   }
 
   typedef double _add_offset_type;
   double add_offset;
 
 
 private:
   static const char* __s_getDataType_() { return "microstrain_3dmgx2_imu/AddOffsetRequest"; }
 public:
   ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }
 
   ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }
 
 private:
   static const char* __s_getMD5Sum_() { return "10fe27c5d4591264b9d05acc7497a18a"; }
 public:
   ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }
 
   ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }
 
 private:
   static const char* __s_getServerMD5Sum_() { return "f5dcf1246c1a25fcc69616e9d14c1482"; }
 public:
   ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }
 
   ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }
 
 private:
   static const char* __s_getMessageDefinition_() { return "float64 add_offset\n\
 \n\
 "; }
 public:
   ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }
 
   ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }
 
   ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
   {
     ros::serialization::OStream stream(write_ptr, 1000000000);
     ros::serialization::serialize(stream, add_offset);
     return stream.getData();
   }
 
   ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
   {
     ros::serialization::IStream stream(read_ptr, 1000000000);
     ros::serialization::deserialize(stream, add_offset);
     return stream.getData();
   }
 
   ROS_DEPRECATED virtual uint32_t serializationLength() const
   {
     uint32_t size = 0;
     size += ros::serialization::serializationLength(add_offset);
     return size;
   }
 
   typedef boost::shared_ptr< ::microstrain_3dmgx2_imu::AddOffsetRequest_<ContainerAllocator> > Ptr;
   typedef boost::shared_ptr< ::microstrain_3dmgx2_imu::AddOffsetRequest_<ContainerAllocator>  const> ConstPtr;
   boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
 }; // struct AddOffsetRequest
 typedef  ::microstrain_3dmgx2_imu::AddOffsetRequest_<std::allocator<void> > AddOffsetRequest;
 
 typedef boost::shared_ptr< ::microstrain_3dmgx2_imu::AddOffsetRequest> AddOffsetRequestPtr;
 typedef boost::shared_ptr< ::microstrain_3dmgx2_imu::AddOffsetRequest const> AddOffsetRequestConstPtr;
 
 
 template <class ContainerAllocator>
 struct AddOffsetResponse_ {
   typedef AddOffsetResponse_<ContainerAllocator> Type;
 
   AddOffsetResponse_()
   : total_offset(0.0)
   {
   }
 
   AddOffsetResponse_(const ContainerAllocator& _alloc)
   : total_offset(0.0)
   {
   }
 
   typedef double _total_offset_type;
   double total_offset;
 
 
 private:
   static const char* __s_getDataType_() { return "microstrain_3dmgx2_imu/AddOffsetResponse"; }
 public:
   ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }
 
   ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }
 
 private:
   static const char* __s_getMD5Sum_() { return "5dea42ce4656fada4736ce3508b56aca"; }
 public:
   ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }
 
   ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }
 
 private:
   static const char* __s_getServerMD5Sum_() { return "f5dcf1246c1a25fcc69616e9d14c1482"; }
 public:
   ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }
 
   ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }
 
 private:
   static const char* __s_getMessageDefinition_() { return "float64 total_offset\n\
 \n\
 \n\
 "; }
 public:
   ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }
 
   ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }
 
   ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
   {
     ros::serialization::OStream stream(write_ptr, 1000000000);
     ros::serialization::serialize(stream, total_offset);
     return stream.getData();
   }
 
   ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
   {
     ros::serialization::IStream stream(read_ptr, 1000000000);
     ros::serialization::deserialize(stream, total_offset);
     return stream.getData();
   }
 
   ROS_DEPRECATED virtual uint32_t serializationLength() const
   {
     uint32_t size = 0;
     size += ros::serialization::serializationLength(total_offset);
     return size;
   }
 
   typedef boost::shared_ptr< ::microstrain_3dmgx2_imu::AddOffsetResponse_<ContainerAllocator> > Ptr;
   typedef boost::shared_ptr< ::microstrain_3dmgx2_imu::AddOffsetResponse_<ContainerAllocator>  const> ConstPtr;
   boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
 }; // struct AddOffsetResponse
 typedef  ::microstrain_3dmgx2_imu::AddOffsetResponse_<std::allocator<void> > AddOffsetResponse;
 
 typedef boost::shared_ptr< ::microstrain_3dmgx2_imu::AddOffsetResponse> AddOffsetResponsePtr;
 typedef boost::shared_ptr< ::microstrain_3dmgx2_imu::AddOffsetResponse const> AddOffsetResponseConstPtr;
 
 struct AddOffset
 {
 
 typedef AddOffsetRequest Request;
 typedef AddOffsetResponse Response;
 Request request;
 Response response;
 
 typedef Request RequestType;
 typedef Response ResponseType;
 }; // struct AddOffset
 } // namespace microstrain_3dmgx2_imu
 
 namespace ros
 {
 namespace message_traits
 {
 template<class ContainerAllocator> struct IsMessage< ::microstrain_3dmgx2_imu::AddOffsetRequest_<ContainerAllocator> > : public TrueType {};
 template<class ContainerAllocator> struct IsMessage< ::microstrain_3dmgx2_imu::AddOffsetRequest_<ContainerAllocator>  const> : public TrueType {};
 template<class ContainerAllocator>
 struct MD5Sum< ::microstrain_3dmgx2_imu::AddOffsetRequest_<ContainerAllocator> > {
   static const char* value() 
   {
     return "10fe27c5d4591264b9d05acc7497a18a";
   }
 
   static const char* value(const  ::microstrain_3dmgx2_imu::AddOffsetRequest_<ContainerAllocator> &) { return value(); } 
   static const uint64_t static_value1 = 0x10fe27c5d4591264ULL;
   static const uint64_t static_value2 = 0xb9d05acc7497a18aULL;
 };
 
 template<class ContainerAllocator>
 struct DataType< ::microstrain_3dmgx2_imu::AddOffsetRequest_<ContainerAllocator> > {
   static const char* value() 
   {
     return "microstrain_3dmgx2_imu/AddOffsetRequest";
   }
 
   static const char* value(const  ::microstrain_3dmgx2_imu::AddOffsetRequest_<ContainerAllocator> &) { return value(); } 
 };
 
 template<class ContainerAllocator>
 struct Definition< ::microstrain_3dmgx2_imu::AddOffsetRequest_<ContainerAllocator> > {
   static const char* value() 
   {
     return "float64 add_offset\n\
 \n\
 ";
   }
 
   static const char* value(const  ::microstrain_3dmgx2_imu::AddOffsetRequest_<ContainerAllocator> &) { return value(); } 
 };
 
 template<class ContainerAllocator> struct IsFixedSize< ::microstrain_3dmgx2_imu::AddOffsetRequest_<ContainerAllocator> > : public TrueType {};
 } // namespace message_traits
 } // namespace ros
 
 
 namespace ros
 {
 namespace message_traits
 {
 template<class ContainerAllocator> struct IsMessage< ::microstrain_3dmgx2_imu::AddOffsetResponse_<ContainerAllocator> > : public TrueType {};
 template<class ContainerAllocator> struct IsMessage< ::microstrain_3dmgx2_imu::AddOffsetResponse_<ContainerAllocator>  const> : public TrueType {};
 template<class ContainerAllocator>
 struct MD5Sum< ::microstrain_3dmgx2_imu::AddOffsetResponse_<ContainerAllocator> > {
   static const char* value() 
   {
     return "5dea42ce4656fada4736ce3508b56aca";
   }
 
   static const char* value(const  ::microstrain_3dmgx2_imu::AddOffsetResponse_<ContainerAllocator> &) { return value(); } 
   static const uint64_t static_value1 = 0x5dea42ce4656fadaULL;
   static const uint64_t static_value2 = 0x4736ce3508b56acaULL;
 };
 
 template<class ContainerAllocator>
 struct DataType< ::microstrain_3dmgx2_imu::AddOffsetResponse_<ContainerAllocator> > {
   static const char* value() 
   {
     return "microstrain_3dmgx2_imu/AddOffsetResponse";
   }
 
   static const char* value(const  ::microstrain_3dmgx2_imu::AddOffsetResponse_<ContainerAllocator> &) { return value(); } 
 };
 
 template<class ContainerAllocator>
 struct Definition< ::microstrain_3dmgx2_imu::AddOffsetResponse_<ContainerAllocator> > {
   static const char* value() 
   {
     return "float64 total_offset\n\
 \n\
 \n\
 ";
   }
 
   static const char* value(const  ::microstrain_3dmgx2_imu::AddOffsetResponse_<ContainerAllocator> &) { return value(); } 
 };
 
 template<class ContainerAllocator> struct IsFixedSize< ::microstrain_3dmgx2_imu::AddOffsetResponse_<ContainerAllocator> > : public TrueType {};
 } // namespace message_traits
 } // namespace ros
 
 namespace ros
 {
 namespace serialization
 {
 
 template<class ContainerAllocator> struct Serializer< ::microstrain_3dmgx2_imu::AddOffsetRequest_<ContainerAllocator> >
 {
   template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
   {
     stream.next(m.add_offset);
   }
 
   ROS_DECLARE_ALLINONE_SERIALIZER;
 }; // struct AddOffsetRequest_
 } // namespace serialization
 } // namespace ros
 
 
 namespace ros
 {
 namespace serialization
 {
 
 template<class ContainerAllocator> struct Serializer< ::microstrain_3dmgx2_imu::AddOffsetResponse_<ContainerAllocator> >
 {
   template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
   {
     stream.next(m.total_offset);
   }
 
   ROS_DECLARE_ALLINONE_SERIALIZER;
 }; // struct AddOffsetResponse_
 } // namespace serialization
 } // namespace ros
 
 namespace ros
 {
 namespace service_traits
 {
 template<>
 struct MD5Sum<microstrain_3dmgx2_imu::AddOffset> {
   static const char* value() 
   {
     return "f5dcf1246c1a25fcc69616e9d14c1482";
   }
 
   static const char* value(const microstrain_3dmgx2_imu::AddOffset&) { return value(); } 
 };
 
 template<>
 struct DataType<microstrain_3dmgx2_imu::AddOffset> {
   static const char* value() 
   {
     return "microstrain_3dmgx2_imu/AddOffset";
   }
 
   static const char* value(const microstrain_3dmgx2_imu::AddOffset&) { return value(); } 
 };
 
 template<class ContainerAllocator>
 struct MD5Sum<microstrain_3dmgx2_imu::AddOffsetRequest_<ContainerAllocator> > {
   static const char* value() 
   {
     return "f5dcf1246c1a25fcc69616e9d14c1482";
   }
 
   static const char* value(const microstrain_3dmgx2_imu::AddOffsetRequest_<ContainerAllocator> &) { return value(); } 
 };
 
 template<class ContainerAllocator>
 struct DataType<microstrain_3dmgx2_imu::AddOffsetRequest_<ContainerAllocator> > {
   static const char* value() 
   {
     return "microstrain_3dmgx2_imu/AddOffset";
   }
 
   static const char* value(const microstrain_3dmgx2_imu::AddOffsetRequest_<ContainerAllocator> &) { return value(); } 
 };
 
 template<class ContainerAllocator>
 struct MD5Sum<microstrain_3dmgx2_imu::AddOffsetResponse_<ContainerAllocator> > {
   static const char* value() 
   {
     return "f5dcf1246c1a25fcc69616e9d14c1482";
   }
 
   static const char* value(const microstrain_3dmgx2_imu::AddOffsetResponse_<ContainerAllocator> &) { return value(); } 
 };
 
template<class ContainerAllocator>
 struct DataType<microstrain_3dmgx2_imu::AddOffsetResponse_<ContainerAllocator> > {
   static const char* value() 
   {
     return "microstrain_3dmgx2_imu/AddOffset";
   }
 
   static const char* value(const microstrain_3dmgx2_imu::AddOffsetResponse_<ContainerAllocator> &) { return value(); } 
 };

} // namespace service_traits
} // namespace ros

#endif // MICROSTRAIN_3DMGX2_IMU_SERVICE_ADDOFFSET_H
